novachat
by Robert Massaroni and Daniel Cerami
https://github.com/rmassaroni/novachat
https://novachat-b6eea.web.app/

Description:
novachat is real-time web-based chat app. As shown in the README.md, there were many other features we were planning to add but ultimately did not have enough time. Currently, there is only one working channel, "Global," in which any user around the world can join. All that is required is the URL shown above. This app was built to have many channels for users to join and create but channel functionality was not finalized. Users are able to send messages to this global server for everyone to see. The header contains a sidebar toggle button, the current channel name, the name of the current user, a button to change the current user's name, and a Villanova icon that was meant to eventually meant to be clickable and open a settings dashboard. The sub-header displays the number of online users, the status of the server, a 'refresh' button, and the socket ID of the user provided by Socket IO. The majority of the page encompasses the list of server messages if there are any. The message bar is on the bottom. Users can send messages by pressing 'Enter'.


Work breakdown:
Robert: backend:
I began by learning Socket.io, a Node.js library for client-server communication. Then, I restarted the project as a React project. I would run the server by typing 'node server.js', however, this would only run the server at localhost:3000, which would not be accessible to mulitple users. This is why I deployed our website to Firebase, but this caused another problem. It only hosted the front end of the project, and there was no server functionality. This led me down a rabbit hole in form of Google Cloud Console, which is not beginner-friendly at all. I spent upwards of 50 hours leaning how it worked. Eventually, I successfully learned how to use Google Cloud's SSH virtual machine instancess, which allowed me to use Node functionality to communicate with my Firebase website. This was not before learning everything there is to know about ports, IPs, domains, SSL certification, and everything else network related. I even bought my own SSL certified domain, nova-chat.com, which actually works but not as well as the Firebase website. There were many security and authentication problems that I had to go through to secure the connection between the server and the website. One of them required restarted the Node project from scratch because it originally supported HTTP instead of HTTPS. Even after transitioning to HTTPS, I needed to create an SSL certified load balancer, a complicated Google Cloud product for securely connecting frontends and backends. SSL certification required a lot of DNS configuration. Eventually, I was able to certify my VM instance and start writing code in it. Fortunately, the code in the SSH virtual machine looked almost identical to the original project. The only file I needed to change was server.js. It needed to point to https://novachat-b6eea.web.app/ instead of localhost:3000. This required a thorough understanding of CORS policy which regulates network security. The problem is that is pretty much impossible to directly point the server to the firebase deployment. I needed to run the server at https://35.236.242.246:8443/ which would then communicate with the Firebase website. This is a static IP address I reserved on Google Cloud. It is desgined to send and receive data on port 8433. After many long days, the website was working as intented. All I needed to do was run 'node server.js' in the SSH virtual machine, and it would constantly be running, but I do not leave it on all the time, because the VM instance costs money to keep running.  However, their was one problem I was never able to solve due to time restraints: users need to open the https://35.236.242.246:8443/ in their browser before the Firebase website can connect to the server.  This is due to the requirement for the user to bypass the security warning of using the IP-based URL.  I spent many hours trying to secure the IP with SSL certification, but the Certificate Authority makes it extra difficult to aquire SSL certificates for IP-based websites. Other certificate providers similarly only provided certificates for URL domains and not IPs.  One feature that we had to give up when transitioning to SSH was the WiFi channel. When this was a simple Node local project, it was able to put users into a channel based on their network's SSID.  For example, anyone using this app in Villanova would be able to chat in a channel called VUMobile to chat with other people from nearby. This functionality stopped working when the server started running in SSH. For security reasons, it is difficult for web-based applications to run shell or terminal-based operations, which were originally used to fetche the SSID of the client. Overall, I learned a lot about backend development, and I think I can now work on much bigger projects.
Robert: frontend:
Before beginning work on the backend, I designed the basic layout of the website.  I designed the header, the chat pages, and the functional message bar.  Originally users were able to horizontally swipe their channels. This would be removed due to time restraints, limited custom channel functionality, and eventually having a sidebar. As the deadline approached, I needed to stop working on the backend to finish the incomplete frontend. I fixed bugs created by server side code such as messages appearing twice and fixed Dan's visual bugs such as server messages appearing as oversized boxes. I syled the header, added the Villanova icon in the right corner, curved the corners of messages, added a Channel header to the top left, added a "Chatting as: " header to the top left, a button to change your name, a display of the number of online users, a server status element, an animated functional refresh button, and a display of the Socket ID.

Daniel's commits:
Fronted:
- Added username "User" + 4 random digits as default username
- Made server messaged red and centered
- Added menu button to toggle sidebar
  - Sidebar is closed by default
  - All available channels are listed
  - Add button to create new channel
    - Popup displayed to enter channel name
  - Creating a new channel will display in the sidebar
- Added "Message" placeholder in the message input field instead of "Send" button

Running the application:
To see this application, you can go the URL shown above.  However, the server will most likely not be running due to the costs of keeping it constantly running.  Going to the URL will only display the front end. I will attach an image to the README.md of the website when the server is running.
